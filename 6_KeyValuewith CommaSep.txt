job.setInputFormatClass(KeyValueTextInputFormat.class);

conf.set("mapreduce.input.keyvaluelinerecordreader.key.value.separator", ",");
		



import java.io.*;
import java.util.*;

import org.apache.hadoop.fs.Path;
//import org.apache.hadoop.filecache.DistributedCache;
//import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.Mapper.Context;
//import org.apache.hadoop.util.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.conf.Configuration;
//import org.apache.hadoop.conf.Configured;
//import org.apache.hadoop.fs.FileSystem;
//import org.apache.hadoop.fs.Path;
//import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.mapreduce.lib.input.NLineInputFormat;
import org.apache.hadoop.mapreduce.lib.input.KeyValueTextInputFormat;



public class KeyValueTextMR {
	
	
	
	public static class Map1 extends Mapper<Text,Text,Text,Text>
	{
		
		
		public void map(Text key,Text value,Context context) throws IOException,InterruptedException
		{
			
			
			
			
			
			context.write(value, key);
			
			
			
			
		}
		
		
	}
	
	
	
	
	public static void main (String args[]) throws Exception
	{
		
		Configuration conf=new Configuration();
		conf.set("mapreduce.input.keyvaluelinerecordreader.key.value.separator", ",");
		
		Job job=Job.getInstance(conf,"job2");
		
		
		job.setInputFormatClass(KeyValueTextInputFormat.class);
		
	
		
		
		job.setOutputFormatClass(TextOutputFormat.class);
		
		FileInputFormat.addInputPath(job, new Path("/home/cloudera/b100/mrinput/emp.txt"));
		FileOutputFormat.setOutputPath(job, new Path("/home/cloudera/b100/mrout2"));
		
		
		
		
		job.setMapOutputKeyClass(Text.class);
		
		job.setMapOutputValueClass(Text.class);
		
		
		job.setMapperClass(Map1.class);
		
	//	job.setCombinerClass(Red1.class);
		
		//job.setReducerClass(Red1.class);
		
		job.setJarByClass(KeyValueTextMR.class);
		
		job.waitForCompletion(true);
		
	}
	
	
	
	

}
