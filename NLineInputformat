
import java.io.*;
import java.util.*;

import org.apache.hadoop.fs.Path;
//import org.apache.hadoop.filecache.DistributedCache;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.Mapper.Context;
//import org.apache.hadoop.util.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FileSystem;
//import org.apache.hadoop.fs.Path;
//import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.input.KeyValueTextInputFormat;
import org.apache.hadoop.mapreduce.lib.input.NLineInputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.mapreduce.lib.input.MultipleInputs;



public class MR112InputFormat 
{

	
	public static class MapInputf extends Mapper<LongWritable,Text,LongWritable,Text>
	{
		
		
		public void map(LongWritable k,Text v,Context context) throws InterruptedException,IOException
		{
			
			
			
			context.write( k, v);
			
		}
		
		
		
	}
	

	public static void main(String[] args) throws Exception
	{
		

		Configuration conf = new Configuration();
		
		//conf.set("mapreduce.input.keyvaluelinerecordreader.key.value.separator", ",");
		
		
				
		Job job =Job.getInstance(conf,"job1");	
		
		job.getConfiguration().setInt("mapreduce.input.lineinputformat.linespermap", 2);
		
		FileInputFormat.addInputPath(job, new Path("/home/cloudera/b112/mr112/dept.csv"));	
				
		FileOutputFormat.setOutputPath(job, new Path("/home/cloudera/b112/mr112/inputf"));
		
		
		job.setInputFormatClass(NLineInputFormat.class);
		
		job.setOutputKeyClass(LongWritable.class);
		
		job.setOutputValueClass(Text.class);
		
		job.setMapperClass(MapInputf.class);

		
		job.setJarByClass(MR112InputFormat.class);
		
		job.waitForCompletion(true);
		
		
		
	}

}
