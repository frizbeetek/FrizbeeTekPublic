import java.io.*;
import java.util.*;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.filecache.DistributedCache;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.util.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Partitioner;



public class MapReducePart2WC
{


public static class Map1 extends Mapper<LongWritable, Text, Text, IntWritable> 
{

public Text word = new Text();
public IntWritable one = new IntWritable(1);


public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException 
{
		String line = value.toString();

		StringTokenizer tokenizer = new StringTokenizer(line);
			while (tokenizer.hasMoreTokens()) 
			{
			word.set(tokenizer.nextToken());
			context.write(word, one);
			}	



}

}

// Custom Parttion Starts here/

public static class WordCountPartitioner extends Partitioner<Text, IntWritable>{
 
	@Override
	public int getPartition(Text key, IntWritable value, int numPartitions) {
		if(numPartitions == 2){
			String partitionKey = key.toString();
			if(partitionKey.charAt(0) == 'a' )
				return 0;
			else 
				return 1;
		}else if(numPartitions == 1)
			return 0;
		else{
			System.err.println("WordCountParitioner can only handle either 1 or 2 paritions");
			return 0;
		}
	}
}







// Reduce Program Starts here

public static class WordcountReducer extends	Reducer<Text, IntWritable, Text, IntWritable>
{

	private IntWritable totalWordCount = new IntWritable();

	//@Override
	public void reduce(final Text key, final Iterable<IntWritable> values,final Context context) throws IOException, InterruptedException 
{

		int sum = 0;
		Iterator<IntWritable> iterator = values.iterator();

		while (iterator.hasNext()) 
		{
			sum += iterator.next().get();
		}

		totalWordCount.set(sum);
		// context.write(key, new IntWritable(sum));
		 		context.write(key, totalWordCount);
}
}



public static void main(String args[]) throws Exception
{

System.out.println("Main started");

Configuration conf=new Configuration();
Job job=new Job(conf,"job1");

job.setInputFormatClass(TextInputFormat.class);
job.setOutputFormatClass(TextOutputFormat.class);


job.setOutputKeyClass(Text.class);
job.setOutputValueClass(IntWritable.class);

Path inputFilePath = new Path(args[0]);
Path outputFilePath = new Path(args[1]);

FileInputFormat.addInputPath(job, inputFilePath);
FileOutputFormat.setOutputPath(job, outputFilePath);


job.setMapperClass(Map1.class);
job.setJarByClass(MapReducePart2WC.class);

//job.setCombinerClass(WordcountReducer.class);
job.setReducerClass(WordcountReducer.class);
job.setPartitionerClass(WordCountPartitioner.class);

job.setNumReduceTasks(2);

job.waitForCompletion(true);

System.out.println("Main End");
}


}
