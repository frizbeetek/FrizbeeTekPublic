import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.util.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;


public class MapOnlyWCi
{


public static class Map1 extends Mapper<LongWritable, Text, Text, IntWritable>
{

public Text word = new Text();
//public IntWritable one = new IntWritable(1);
public IntWritable one = new IntWritable();
// public static int x=0;


public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException
{
                String line = value.toString();

                int x=0;
                StringTokenizer tokenizer = new StringTokenizer(line);
                        while (tokenizer.hasMoreTokens())
                        {
                        x++;
                        one.set(x);
                        word.set(tokenizer.nextToken());
                        context.write(word, one);
                        }

}

}

// Reduce Program Starts here


public static void main(String args[]) throws Exception
{

System.out.println("Main started");

Configuration conf=new Configuration();
Job job=new Job(conf,"job1");

job.setInputFormatClass(TextInputFormat.class);
job.setOutputFormatClass(TextOutputFormat.class);


job.setOutputKeyClass(Text.class);
job.setOutputValueClass(IntWritable.class);

Path inputFilePath = new Path(args[0]);
Path outputFilePath = new Path(args[1]);

FileInputFormat.addInputPath(job, inputFilePath);
FileOutputFormat.setOutputPath(job, outputFilePath);


job.setMapperClass(Map1.class);
job.setJarByClass(MapOnlyWCi.class);


//job.setNumReduceTasks(0);

job.waitForCompletion(true);

System.out.println("Main End");
}


}
                